1.1.1 Makefile 基础知识
1.1.1.1 Makefile作用和意义
	（1）	工程项目中c文件太多了，管理不方便，因此用makefile做项目管理，方便
			编译问题。
	（2）	uboot和linux kernel 本质上都是c语言的项目，都由很多个c文件组成，因此
			分析uboot必须对makefile有所了解。
1.1.1.2 目标 、依赖、命令
	（1）	目标就是我们要去make xxx的xxx，就是我们最终要生成的东西。
	（2）	依赖就是用来生成目录的原材料
	（3）	命令就是加工方法，所以make xxx的过程就是使用命令将依赖加工成目标的过程
1.1.1.3 通配符%和makefile自动推导（规则）
	（1）	%是makefile的通配符，代表一个或几个字母，也就是说%.o就是代表所有
			以.o结尾的文件。
	（2）	所谓自动推导，就是makefile的规则。当makefile需要某一个目标时候，他会
			把这个目标去套规则说明，一旦匹配到某个规则说明，则makefile会去找这个
			规则中的依赖，如果能找到这个规则就会用依赖生成目标。
1.1.1.4 makefile中定义和使用变量
	（1）	makefile中定义和使用变量，和shell脚本中非常相似。相似是说：都没有变量类型，
			直接定义使用，引用时候直接用$(var)
1.1.1.5 伪目标（.PHONY)
	（1）	伪目标的意思是这个目标本身不代表一个文件，执行这个目标不是为了得到某个文件，
			而是单纯为了执行这个目标下的命令
	（2）	伪目标一般没有依赖，因为执行伪目标就是为了执行目标下的命令。既然一定要执行
			命令了那就不必加依赖，因为不加依赖就是无条件执行
	（3）	伪目标可以直接写，不影响使用，但是有时候为了明确声明这个目标是伪目标，会在.PHONY来
			申明
			.PHONY clean
			clean:
				rm *.o *.elf *.bin *.dis mkx210 -f
1.1.1.6	makefile的文件名
	（1）	makefile文件命合法的一般有两个，一个是Makefile或者makefile
	
1.1.1.7 makefile中引用其他makefile（include指令）
	（1）	在主makefile中引用子makefile，有时候makefile总体比较复杂，因此分成好几个makefile来写。
			然后在主makefile中引用其他的，用include指令来引用。引用的效果也是原地展开，和c语言中的
			头文件非常相似。
			
			
1.1.2 makefile补充知识
1.1.2.1 makefile中注释用#
	（1）	makefile中的注释使用#，和shell一样。
1.1.2.2	命令前面用@来静默执行
	（1）	makefile的命令行中的前面的@来表示静默执行。
	（2）	makefile中默认情况下执行一行命令前会先把这行命令给打印出来，然后执行这个命令。
	（3）	如果你不想看到命令本身，只想看到命令结果就静默执行
1.1.2.3	makefile中几种变量赋值运算符
			makefile中并不要求赋值运算符一定要有空格或无空格，这一点比shell松。
	（1）	=
			最简单的赋值
	（2）	:=
			在大多是情况下和=效果一样，但是
			example
			myvar = "yulai"

			myvar2 :=$(myvar)
			myvar3 = $(myvar)

			myvar = "yuzhen"

			all:
					@echo $(myvar2)
					@echo $(myvar3)
					
			
			yulai
			yuzhen

			
	（3）	?=
			如果变量前面并没有赋值过则执行这条赋值，如果前面已经赋值过了则本行被忽略。
			实验中可以看出，所谓的没有赋值，其实就是这个变量没有被定义过。
	（4）	+=
			用来给一个已经赋值过的变量接续赋值，意思就是把这次的值加到原来的值后面，有点类似
			strcat。（在shell makefile文件中可以认为所有变量都是字符串，+=相当于给字符串strcat
			
			myvar = 'woshi'
			myvar += 'yulai'
			mynumber = 1
			mynumber += 2
			all:
					@echo $(myvar)
					@echo $(mynumber)
			
			woshi yulai
			1 2	
			
1.1.2.4 makefile环境变量
	（1）	makefile中用export导出的就是环境变量。一般情况下要求环境变量名用大写，普通变量用小写
	（2）	环境变量和普通变量不通，可以这样理解：环境变量类似于整个工程中所有makefile之间可以
			共享的全局变量，而普通变量只是相当于当前makefile中使用的局部变量。所以要注意：
			定义了一个环境变量会影响到工程中的其他文件
	（3）	我们的makefile中有一些环境变量可能是makefile本身自己定义的内部环境变量或者当前
			执行环境提供的环境变量。make CC=arm-linux-gcc,其实就是给当前makefile传了一个环境
			变量CC，值是arm-linux-gcc。我们在make时给makefile传的环境变量值优先级是最高的，可以
			覆盖makefile中的赋值。这样理解：
			环境变量类似于整个工程中所有makefile之间可以这就好像c语言中预定义的宏__LINE__一样。


1.1.3 makefile补充学习2
1.1.3.1 makefile中使用通配符
	（1）	*
			若干个任意字符
	（2）	？
			1个任意字符
	（3）	[]
			将[]的字符去匹配
			
	%也是通配符，和*很相似，但是一般用于规则中，所以教规则通配符。
	
	关于通配符，makefile还有一些wildcard等比较复杂的通配符，具体参考跟我一起学makefile。
	
1.1.3.2 makefile中的自动变量
	（1）	为什么使用自动变量
			在有些情况下，文件集合中文件非常多，描述的时候很麻烦，
			所以我们makefile就用一些特殊的符号来代替符合某种条件的文件集，这就形成了自动变量
	（2） 	自动变量的含义：预定义的特殊意义的符号。就类似于c语言编译器中预制的那些宏__FILE__一样
	（3）	常见的自动变量
			$@	规则的目标文件名
			$<	规则的依赖文件名
			$^ 	依赖的文件集合


























				
	
	
